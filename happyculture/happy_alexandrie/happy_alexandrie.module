<?php

/**
 * @file
 * Contains happy_alexandrie.module
 */
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function happy_alexandrie_theme() {
  $theme = [];

  $theme['happy_cover'] = array(
    'variables' => array('cover_url' => '', 'cover_title' => ''),
    'template' => 'happy-cover',
  );

  return $theme;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function happy_alexandrie_entity_extra_field_info() {
  $extra = array();

  $extra['node']['alexandrie_book']['display']['book_quantity'] = array(
    'label' => t('Book(s) left'),
    'description' => t('Quantity of book.'),
    'weight' => 100,
    'visible' => TRUE,
  );

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function happy_alexandrie_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('book_quantity')) {
    $value = \Drupal::state()->get('alexandrie.qty.book.' . $entity->id(), 0);
    $tag = 'book:' . $entity->id() . ':qty';
    $build['book_quantity'] = [
      '#type' => 'markup',
      '#markup' => $value,
      '#cache' => [
        'tags' => [$tag]
      ]
    ];
  }
}

/**
 * Implements hook_cron().
 */
function happy_alexandrie_cron() {

  $happy_alexandrie_timestamp = \Drupal::state()->get('happy_alexandrie.day_timestamp', 0);

  // Keep the quantities valid for at least 10 seconds.
  if ((REQUEST_TIME - $happy_alexandrie_timestamp) >= 10) {
    $nids = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'alexandrie_book')
    ->execute();

    foreach ($nids as $nid) {
      $new_value = rand(1,10);
      \Drupal::state()->set('alexandrie.qty.book.' . $nid, $new_value);
      Cache::invalidateTags(array('book:' . $nid . ':qty'));
    }
    \Drupal::state()->set('happy_alexandrie.day_timestamp', REQUEST_TIME);
  }
}
